package egovframework.jtLunch.admin.dashboard.Controller;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import egovframework.jtLunch.admin.dashboard.DTO.DashBoardDTO;
import egovframework.jtLunch.admin.dashboard.DTO.NoticeDTO;
import egovframework.jtLunch.admin.dashboard.Service.DashBoardService;
import egovframework.jtLunch.admin.dashboard.Service.NoticeService;
import egovframework.jtLunch.admin.dashboard.Util.WeekDayUtil;
import egovframework.jtLunch.admin.owner.DTO.DateData;
import egovframework.jtLunch.admin.owner.DTO.SearchResultDTO;
import egovframework.jtLunch.admin.owner.Service.CheckAteUserService;
import egovframework.jtLunch.admin.owner.Service.MenuService;
import egovframework.jtLunch.admin.owner.Service.RequestService;
import egovframework.jtLunch.cmmn.join.Service.JoinService;

@Controller
public class DashBoardController {
	
	@Autowired
	JoinService service;
	@Autowired
	private DashBoardService dashBoardService;
	@Autowired
	private NoticeService noticeService;
	@Autowired
	private MenuService menuService;
	@Autowired
	private CheckAteUserService checkateuserService;
	@Autowired
	private RequestService requestService;

	//관리자 main
	@GetMapping("/admin/main")
	public String DashBoardPage(Model model) throws Exception {
		
		Calendar cal = Calendar.getInstance();
		
		int year = cal.get(Calendar.YEAR);
		int month = cal.get(Calendar.MONTH) +1;
		int date = cal.get(Calendar.DATE);
		
		Date nowDate = new Date();
		SimpleDateFormat simpleDateFormat = new SimpleDateFormat("MM");
		String strNowDate = simpleDateFormat.format(nowDate);
		
		model.addAttribute("reserveCount", menuService.countReserve());
		model.addAttribute("ate_user", menuService.countAte_user());
		model.addAttribute("month", strNowDate);
		model.addAttribute("money", 7000);
		model.addAttribute("weekCnt", WeekDayUtil.getCurrentWeekOfMonth(year,month,date));
		model.addAttribute("chartData", dashBoardService.getChartData());
		model.addAttribute("chartMData", dashBoardService.getChartMonth());
		model.addAttribute("monthate", dashBoardService.getmonthAte());
		model.addAttribute("searchUser", dashBoardService.searchUser());
		
		return "admin/adminMain";
	}
	//사용자 정보 삭제
	@RequestMapping(value = "/dashboard/userDelete", method = RequestMethod.POST, produces = "application/text; charset=utf8")
	@ResponseBody
	public String delete(@RequestParam("user_id") String user_id, Model model) throws Exception {
		String resultMsg = "";
		
		try {	
			dashBoardService.deleteUser(user_id);	
			resultMsg = "삭제완료";
		} catch(Exception e){
			resultMsg = "삭제실패";
		}
			
		return resultMsg;	
	}
	
	@RequestMapping(value = "/dashboard/ateuserSearch", method = RequestMethod.GET)
	public String ateuserSearch(Model model) throws Exception {
		
		return "admin/ateuserSearch";
	}
	//기간별 식수 조회
	@RequestMapping(value = "/dashboard/totalCountSearch", method = RequestMethod.POST)
	@ResponseBody
	public ModelAndView totalCountSearch(HttpServletRequest re, Model model) throws Exception {	
		
		DecimalFormat decFormat = new DecimalFormat("###,###");
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		ModelAndView mv = new ModelAndView("jsonView");
		
		String startDate=re.getParameter("startDt");
		String endDate=re.getParameter("endDt");
		
		DateData dd=new DateData();
		DashBoardDTO userdto2 = new DashBoardDTO();
		
		dd.setStartDate(startDate);
		dd.setEndDate(endDate);
		
		userdto2.setDb_startDate(startDate);
		userdto2.setDb_endDate(endDate);
		
		int ateUser=0;
		List<DashBoardDTO> userdto = dashBoardService.printAteUser(userdto2);
		Date sd = format.parse(startDate);
		Date ed = format.parse(endDate);
		ArrayList<String> dates = new ArrayList<String>();
		SearchResultDTO[] ateuserlist=new SearchResultDTO[100];
		List<SearchResultDTO> dto= new ArrayList<SearchResultDTO>();
		Date currentDate = sd;
		while (currentDate.compareTo(ed) <= 0) {
			dates.add(format.format(currentDate));
			Calendar c = Calendar.getInstance();
			c.setTime(currentDate);
			c.add(Calendar.DAY_OF_MONTH, 1);
			currentDate = c.getTime();
		}
		for(int i=0;i<dates.size();i++) {
			SearchResultDTO srdto=new SearchResultDTO();
			int ateResult=0;
			ateResult=checkateuserService.CountAteTermTable(dates.get(i));
			srdto.setEatDate(dates.get(i));
			srdto.setAteUserCount(ateResult);
			dto.add(i,srdto);
		}
		for(int i=0;i<dto.size();i++) {
			ateuserlist[i]=dto.get(i);
		}
		try {
			ateUser=checkateuserService.CountAteTerm(dd);
			String money=decFormat.format(ateUser*7000);
			mv.addObject("ateUser",ateUser);
			mv.addObject("money",money);
			mv.addObject("msg","검색완료!");
			mv.addObject("result",ateuserlist);
			mv.addObject("searchUser",userdto);
		} catch(Exception e){
			
		}
		
		return mv;
	}

	@RequestMapping(value = "/dashboard/caculate", method = RequestMethod.GET)
	public String calculate(Model model) throws Exception {
		
		return "admin/calculate";
	}
	//기간별 정산
	@RequestMapping(value = "/dashboard/totalCalculate", method = RequestMethod.POST)
	@ResponseBody
	public ModelAndView totalCalculate(HttpServletRequest re, Model model) throws Exception {	
		
		DecimalFormat decFormat = new DecimalFormat("###,###");
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		ModelAndView mv = new ModelAndView("jsonView");
		String startDate=re.getParameter("startDt");
		String endDate=re.getParameter("endDt");

		DateData dd=new DateData();
		dd.setStartDate(startDate);
		dd.setEndDate(endDate);
		int ateUser=0;
		
		Date sd = format.parse(startDate);
		Date ed = format.parse(endDate);
		ArrayList<String> dates = new ArrayList<String>();
		SearchResultDTO[] ateuserlist=new SearchResultDTO[100];
		List<SearchResultDTO> dto= new ArrayList<SearchResultDTO>();
		Date currentDate = sd;
		while (currentDate.compareTo(ed) <= 0) {
			dates.add(format.format(currentDate));
			Calendar c = Calendar.getInstance();
			c.setTime(currentDate);
			c.add(Calendar.DAY_OF_MONTH, 1);
			currentDate = c.getTime();
		}
		for(int i=0;i<dates.size();i++) {
			SearchResultDTO srdto=new SearchResultDTO();
			int ateResult=0;
			ateResult=checkateuserService.CountAteTermTable(dates.get(i));
			srdto.setEatDate(dates.get(i));
			srdto.setAteUserCount(ateResult);
			String tmoney=decFormat.format(ateResult*7000);
			srdto.setTotalMoney(tmoney);
			dto.add(i,srdto);
		}
		for(int i=0;i<dto.size();i++) {
			ateuserlist[i]=dto.get(i);
		}
		try {
			ateUser=checkateuserService.CountAteTerm(dd);
			String money=decFormat.format(ateUser*7000);
			mv.addObject("ateUser",ateUser);
			mv.addObject("money",money);
			mv.addObject("msg","검색완료!");
			mv.addObject("result",ateuserlist);
		} catch(Exception e){

		}
		
		return mv;
	}
	//관리자 공지사항
	@RequestMapping(value = "/dashboard/notice", method = RequestMethod.GET)
	public String notice(NoticeDTO noticedto, Model model) throws Exception {
		
		noticeService.CountSet();
		noticeService.CountUpdate(noticedto);
		List<NoticeDTO> dto = noticeService.NoticePrint();
		model.addAttribute("notice", dto);
		
		return "admin/notice";
	}
	
	@RequestMapping(value = "/dashboard/noticeinsert", method = RequestMethod.GET)
	public String noticeinsert(Model model) throws Exception {
		
		return "admin/noticeinsert";
	}
	//공지사항 등록
	@RequestMapping(value = "/dashboard/noticeInsert", method = RequestMethod.POST)
	public String noticeInsert(NoticeDTO dto, Model model) throws Exception {
		
		noticeService.NoticeInsert(dto);

		return "redirect:/dashboard/notice";
	}
	//공지사항 상세보기
	@RequestMapping(value = "/dashboard/noticedetails", method = RequestMethod.GET)
	public String noticedetails(@RequestParam("notice_id") String notice_id, Model model) throws Exception {

		model.addAttribute("notice", noticeService.NoticeSelect(notice_id));
		return "admin/noticeDetails";
	}
	//공지사항 수정
	@RequestMapping(value = "/dashboard/noticeupdate", method = RequestMethod.GET)
	public String noticeupdate(@RequestParam("notice_id") String notice_id, Model model) throws Exception {
		
		model.addAttribute("notice", noticeService.NoticeSelect(notice_id));
		
		return "admin/noticeupdate";
	}
	
	@RequestMapping(value = "/dashboard/noticeUpdate", method = RequestMethod.POST)
	public String noticeUpdate(NoticeDTO dto, HttpServletRequest re, Model model) throws Exception {
		
		noticeService.NoticeUpdate(dto);

		return "redirect:/dashboard/notice";
	}
	//공지사항 삭제
	@RequestMapping(value = "/dashboard/noticeDelete", method = RequestMethod.POST, produces = "application/text; charset=utf8")
	@ResponseBody
	public String noticeDelete(@RequestParam("notice_id") String notice_id, Model model) throws Exception {
		
		String resultMsg = "";
		
		try {
				
			noticeService.NoticeDelete(notice_id);
			resultMsg = "삭제완료";
		} catch(Exception e){
			resultMsg = "삭제실패";
		}
			
		return resultMsg;	
	}
	//관리자 요청사항
	@RequestMapping(value = "/dashboard/request", method = RequestMethod.GET)
	public String request(Model model) throws Exception {
		
		model.addAttribute("request", requestService.printRequestAll());
		
		return "admin/request";
	}
	//요청사항 상세보기
	@RequestMapping(value = "/dashboard/requestdetails", method = RequestMethod.GET)
	public String requestdetails(@RequestParam("req_id") String req_id, Model model) throws Exception {

		model.addAttribute("request", requestService.selectRequest(req_id));
		requestService.adminCheck(req_id);
		return "admin/requestDetails";
	}
	//사용자 등록
	@RequestMapping(value = "/dashboard/userinsert", method = RequestMethod.GET)
	public String userinsert(DashBoardDTO dto, Model model) throws Exception {
		
		dashBoardService.userInsert(dto);
		
		return "redirect:/admin/main";
	}
	//사용자 ID 중복확인
	@RequestMapping(value="/checkid", method = RequestMethod.POST)
	@ResponseBody
	public ModelAndView checkid(HttpServletRequest request) throws Exception{
		
		ModelAndView mv = new ModelAndView("jsonView");
		String user_id = request.getParameter("user_id").toString();
		
		Map<String, Object> requestMap = new HashMap<String, Object>();
		
		requestMap.put("user_id", user_id);
		mv.addObject("checkid", service.checkID(requestMap));
		
		return mv;
		
	}
	//관리자 로그아웃
	@GetMapping("/admin/logout")
	public String adminLogoutPage(Model model) throws Exception {
	
		return "admin/login/adminLogin";
	}
}

package egovframework.jtLunch.main.reservation.Controller;


import java.io.PrintWriter;
import java.time.LocalTime;

import javax.inject.Inject;
import javax.servlet.http.HttpServletResponse;

import org.apache.log4j.Logger;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import egovframework.jtLunch.cmmn.security.DTO.CustomUserDetails;
import egovframework.jtLunch.cmmn.security.Service.UserService;
import egovframework.jtLunch.main.reservation.DTO.ReservationDTO;
import egovframework.jtLunch.main.reservation.Service.ReservationService;

@Controller
public class ReservationController {
	
	Logger log = Logger.getLogger(getClass());
	
	@Inject
	UserService userservice;
	
	@Inject
	ReservationService reservationService;

	
	@RequestMapping(value="/user/reserve", method=RequestMethod.POST)
	public void reserve(Authentication authentication, ReservationDTO reservationDTO, HttpServletResponse response) throws Exception{
		response.setCharacterEncoding("UTF-8");
		response.setContentType("text/html; charset=utf-8");
		PrintWriter out=response.getWriter();
		Authentication auth = SecurityContextHolder.getContext().getAuthentication();
		Object principal = auth.getPrincipal();
		
		String id = "";
		if(principal != null) {
			id = auth.getName();	
		}
		
		CustomUserDetails dto = userservice.selectUser(id);
		
		String res_id = dto.getUser_id();
		String res_name = dto.getUser_name();
		reservationDTO.setRes_id(res_id);
		reservationDTO.setRes_name(res_name);
		LocalTime now = LocalTime.now();
		int hour = now.getHour();
		int minute = now.getMinute();

        log.debug("=======================" + hour + minute + "======================"); 
 		log.debug("=======================" + reservationDTO + "======================");
		
/*		if(hour > 10 && minute > 30 || hour > 11 && minute < 30) {
			out.println("<script>alert('금일 예약이 마감되었습니다.'); location.href='/user/menuplanner';</script>");
			out.flush();
		}
	
		else {
*/	
			reservationService.reserve(reservationDTO);
			out.println("<script>alert('예약이 완료되었습니다.'); location.href='/user/menuplanner';</script>");
			out.flush();
			
		}
	}
//}

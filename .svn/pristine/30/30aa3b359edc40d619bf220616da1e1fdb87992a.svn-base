package egovframework.jtLunch.main.qrcode.Controller;

import javax.inject.Inject;

import org.apache.log4j.Logger;
import org.springframework.security.core.Authentication;
import org.springframework.security.core.context.SecurityContextHolder;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;

import egovframework.jtLunch.main.qrcode.Service.QrCodeService;
import egovframework.jtLunch.main.reservation.DTO.ReservationDTO;


@Controller
public class QrCodeController {
	
	Logger log = Logger.getLogger(getClass());
	
	@Inject
	QrCodeService qrcodeService;
	
	@RequestMapping(value="/user/qrcodeMain", method=RequestMethod.GET)
	public String qrcodeMain(Model model) throws Exception{

		return "/user/qrscan";
	}

	@RequestMapping(value="/user/qrcode", method=RequestMethod.GET)
	public String qrcodeScan(Model model) throws Exception{
		
		Authentication authentication = SecurityContextHolder.getContext().getAuthentication();
		String id = authentication.getName();
		ReservationDTO dto = qrcodeService.selectRes(id);
		String resultMsg = "";
		
			//System.out.println("-------------------------------------------------"+qrcodeService.selectRes(id));
		try {
			if(dto != null) 
			{
				System.out.println(">>>>>>"+dto.getRes_check()+"userid "+dto.getRes_id());
				if(dto.getRes_check()==0) 
				{
					System.out.println("예약한 사람 업데이트");
					qrcodeService.updateRes(id);
					qrcodeService.insertRes(id);
					resultMsg = "확인되었습니다!";
				}
				else if(dto.getRes_check()==1)
				{	
					System.out.println("이미 예약한 사원입니다!");
					resultMsg = "확인되었습니다!";
				}
			} 
			else if(dto == null)
			{
				qrcodeService.insertnoRes(id);
				qrcodeService.insertnoResate(id);
				System.out.println("미예약자 예약되었습니다.");
				resultMsg = "확인되었습니다!";
			}
		} catch(Exception e){
			System.out.println(e.getMessage());
			resultMsg = "인식실패!";
		}
		return "redirect:/user/menuplanner";
	}

}

package egovframework.jtLunch.admin.owner.Controller;

import java.text.DecimalFormat;
import java.text.SimpleDateFormat;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.ResponseBody;
import org.springframework.web.servlet.ModelAndView;

import egovframework.jtLunch.admin.owner.DTO.DateData;
import egovframework.jtLunch.admin.owner.DTO.MenuDTO;
import egovframework.jtLunch.admin.owner.DTO.SearchResultDTO;
import egovframework.jtLunch.admin.owner.Service.CheckAteUserService;
import egovframework.jtLunch.admin.owner.Service.MenuService;
import egovframework.jtLunch.cmmn.PagingDTO;
import egovframework.jtLunch.main.menuplanner.DTO.MenuPlannerDTO;
import egovframework.jtLunch.main.qrcode.DTO.QrCodeDTO;
import net.sf.json.JSONArray;

@Controller
public class OwnerController {
	@Autowired
	private MenuService menuService;
	@Autowired
	private CheckAteUserService checkateuserService;
	
	
	//식당운영자 main
	@SuppressWarnings("unchecked")
	@GetMapping("/owner/main")
	public String OwnerMain(Model model) throws Exception {
		MenuPlannerDTO dto = menuService.todayMenuPlan();
		int reserveCount=menuService.countReserve();
		int ate_user=menuService.countAte_user();
		int total_like_count=0; //모든 메뉴의 좋아요 수 합
		int top10_count=0; //좋아요 수 상위 10개 메뉴의 좋아요 수 합
		List<MenuDTO> menuTop = null; //상위 10개 메뉴를 저장하는 리스트
		List<MenuDTO> menuall = null; //모든 메뉴를 저장하는 리스트
		menuTop=(List<MenuDTO>) menuService.selectLikeCount10();
		menuall=(List<MenuDTO>) menuService.printMenuAll();
		
		for(int i=0;i<menuall.size();i++) {
			total_like_count+=menuall.get(i).getLike_count(); //모든 메뉴의 좋아요 수 합
		}
		for(int i=0;i<menuTop.size();i++) {
			top10_count+=menuTop.get(i).getLike_count(); //상위 10개 메뉴의 좋아요 수 합
		}
		model.addAttribute("total_like_count", total_like_count); //전체 메뉴의 좋아요 수 합
		model.addAttribute("etc", total_like_count-top10_count); //기타 ( 전체 메뉴 좋아요 수 - 상위 10개 메뉴 좋아요 수)
		model.addAttribute("menuTop", menuTop); //상위 10개 메뉴 리스트
		model.addAttribute("reserveCount", reserveCount);
		model.addAttribute("ate_user", ate_user);
		model.addAttribute("todayMenu", dto);
		
	
		return "admin/owner/menu/todayMenuPlanner";
	}
		
	//식당운영자 메뉴등록폼
	@GetMapping("/owner/menuInsert")
	public String MenuInsert(HttpServletRequest re, Model model) throws Exception{
		return "/admin/owner/menu/menuInsert";
		
	}
	//식당운영자 메뉴 등록 내용 저장
	@RequestMapping(value="/owner/menuSave", method=RequestMethod.POST, produces = "application/text; charset=utf8")
	@ResponseBody
	public String MenuSave(HttpServletRequest re) throws Exception{
		
		String resultMsg = "";
		
		String menuId=re.getParameter("menuId");
		String type=re.getParameter("selectType");
		String menuName=re.getParameter("menuName");
		
		MenuDTO vo=new MenuDTO();
		
		if(type.equals("밥")) {
			menuId="R-"+menuId;
		} else if(type.equals("국")) {
			menuId="S-"+menuId;
		} else if(type.equals("반찬")) {
			menuId="D-"+menuId;
		}
		
		int check=menuService.checkMenu(menuName); //입력한 메뉴명이 DB에 존재하는지 확인
		
		try {
			vo.setMenu_id(menuId);
			vo.setMenu_type(type);
			vo.setMenu_name(menuName);
			
			menuService.MenuInsert(vo);
			System.out.println("등록완료");
			
			resultMsg = "등록완료";
		} catch(Exception e){
			System.out.println(e.getMessage());
			if(check>0) {
				resultMsg = "이미 등록된 메뉴입니다.";
			}
			else{
				resultMsg = "등록실패";
			}
		}
		
		return resultMsg;		
	}
	//식당운영자 _ 메뉴 목록 출력
	@GetMapping("/owner/menuList")
	public String printMenu(PagingDTO vo, HttpServletRequest re, Model model){
		try {
			model.addAttribute("viewAll", menuService.printMenuAll());
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		return "admin/owner/menu/menuList";
	}
	
	//식당운영자 _ 수정할 메뉴 정보 가져오기
	@RequestMapping(value = "/owner/menuUpdate", method = RequestMethod.POST)
	public ModelAndView updateForm(@RequestParam("menu_id") String menu_id, Model model,HttpServletRequest re) throws Exception {
		ModelAndView mv = new ModelAndView("jsonView");
		MenuDTO dto=menuService.getUpdateMenu(menu_id);
		
		try {
			mv.addObject("result", dto);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		return mv;
	}
	
	//식당운영자 _ 메뉴 수정 저장
	@RequestMapping(value = "/owner/updateSave", method = RequestMethod.POST, produces = "application/text; charset=utf8")
	@ResponseBody
	public String updateSave(MenuDTO dto, HttpServletRequest re, Model model){	
		String resultMsg = "";
			
		try {
			menuService.UpdateMenu(dto);
				
			resultMsg = "수정완료";
		} catch(Exception e){
			System.out.println(e.getMessage());
			resultMsg = "수정실패";
		}
			
		return resultMsg;	
	}

	//식당운영자 _ 메뉴 삭제
	@RequestMapping(value = "/owner/menuDelete", method = RequestMethod.POST, produces = "application/text; charset=utf8")
	@ResponseBody
	public String delete(@RequestParam("menu_id") String menu_id, Model model){
		String resultMsg = "";
		
		try {
			menuService.DeleteMenu(menu_id);				
			resultMsg = "삭제완료";
		} catch(Exception e){
			System.out.println(e.getMessage());
			resultMsg = "삭제실패";
		}
			
		return resultMsg;	
	}
	
	//식당운영자 _ 금일 식단표 등록
	@PostMapping("/owner/menuPlanner")
	public ModelAndView menuPlanner() throws Exception{
		ModelAndView mv = new ModelAndView("jsonView");
		List<?> category = null;
		category = menuService.allMenu();
		mv.addObject("category", category);
		
		return mv;
	}
	
	//식당운영자 식단표 저장
	@RequestMapping(value="/owner/menuplanSave", method=RequestMethod.POST, produces = "application/text; charset=utf8")
	@ResponseBody
	public String menuplanSave(HttpServletRequest re, Model model) throws Exception{
		String resultMsg = "";
		String date=re.getParameter("SelectDate");
		String rice=re.getParameter("rice");
		String soup=re.getParameter("soup");
		String sideDish=re.getParameter("sideDish_insert0");

		for(int i=1;i<10;i++) {
			String str="sideDish_insert"+i;
			if(re.getParameter(str)!=null) {
				sideDish= sideDish + "/" +re.getParameter(str) ;
			}
		}

		MenuPlannerDTO dto=new MenuPlannerDTO();
		try {
			dto.setToday_date(date);
			dto.setSteamed_rice(rice);
			dto.setSoup(soup);
			dto.setSide_dish(sideDish);
			
			menuService.insertTodayMenu(dto);
			resultMsg = "식단등록완료";
		} catch(Exception e){
			System.out.println(e.getMessage());
			resultMsg = "식단등록실패";
		}
		return resultMsg;
	}
	
	//식당운영자 _ 식단표 수정 저장
	@RequestMapping(value = "/owner/menuPlanUpdateSave", method = RequestMethod.POST, produces = "application/text; charset=utf8")
	@ResponseBody
	public String menuPlanUpdateSave(HttpServletRequest re, Model model) throws Exception {			
		String resultMsg = "";
		String today_date=re.getParameter("SelectDate");
		String rice=re.getParameter("rice");
		String soup=re.getParameter("soup");
		String sideDish=re.getParameter("sideDish_modify0");

		for(int i=1;i<10;i++) {
			String str="sideDish_modify"+i;
			if(re.getParameter(str)!=null) {
				sideDish= sideDish + "/" +re.getParameter(str) ;
			}
		}
		
		MenuPlannerDTO dto=new MenuPlannerDTO();
		try {
			dto.setToday_date(today_date);
			dto.setSteamed_rice(rice);
			dto.setSoup(soup);
			dto.setSide_dish(sideDish);
			
			menuService.UpdateMenuPlan(dto);
			resultMsg = "식단수정완료";
		} catch(Exception e){
			System.out.println(e.getMessage());
			resultMsg = "식단수정실패";
		}
		return resultMsg;
	}
	
	//식당운영자 _ 월/일별 식수 인원 확인 (캘린더)
	@SuppressWarnings("unchecked")
	@RequestMapping(value = "/owner/ownerCalendar", method = RequestMethod.GET)
	public String calendar(Model model, HttpServletRequest request, DateData dateData) throws Exception{
		DecimalFormat decFormat = new DecimalFormat("###,###");
		Calendar cal = Calendar.getInstance();
		DateData calendarData;
		//검색 날짜
		if(dateData.getDate().equals("")&&dateData.getMonth().equals("")){
			dateData = new DateData(String.valueOf(cal.get(Calendar.YEAR)),String.valueOf(cal.get(Calendar.MONTH)),String.valueOf(cal.get(Calendar.DATE)),null);
		}
		//검색 날짜 end

		Map<String, Integer> today_info =  dateData.today_info(dateData);
		List<DateData> dateList = new ArrayList<DateData>();
		// 검색 날짜 end
		
		ArrayList<QrCodeDTO> ateuser_list = (ArrayList<QrCodeDTO>) checkateuserService.ateuser_list(dateData);
		
		// 달력데이터에 넣기 위한 배열 추가
		QrCodeDTO[][] ateuser = new QrCodeDTO[32][100];
		if (ateuser_list.isEmpty() != true) {
			int j = 0;
			for (int i = 0; i < ateuser_list.size(); i++) {
			int date = Integer.parseInt(String.valueOf(ateuser_list.get(i).getAte_date()).substring(
				String.valueOf(ateuser_list.get(i).getAte_date()).length() - 2,
				String.valueOf(ateuser_list.get(i).getAte_date()).length()));
				if (i > 0) {
					int date_before = Integer.parseInt(String.valueOf(ateuser_list.get(i - 1).getAte_date())
							.substring(String.valueOf(ateuser_list.get(i - 1).getAte_date()).length() - 2,
										String.valueOf(ateuser_list.get(i - 1).getAte_date()).length()));
					if (date_before == date) {
						j = j + 1;
						ateuser[date][j] = ateuser_list.get(i);
						System.out.println(">>>>1"+ateuser[date][j]);
					} else {
						j = 0;
						ateuser[date][j] = ateuser_list.get(i);
						System.out.println(">>>>2"+ateuser[date][j]);
					}
				} else {
					ateuser[date][j] = ateuser_list.get(i);
					System.out.println(">>>>3"+ateuser[date][j]);
				}
			}
		}
		//실질적인 달력 데이터 리스트에 데이터 삽입 시작.
		//일단 시작 인덱스까지 아무것도 없는 데이터 삽입
		for(int i=1; i<today_info.get("start"); i++){
			calendarData= new DateData(null, null, null, null);
			dateList.add(calendarData);
		}
		
		//날짜 삽입
		for (int i = today_info.get("startDay"); i <= today_info.get("endDay"); i++) {
			QrCodeDTO[] ateuser_data=new QrCodeDTO[100];
			ateuser_data= ateuser[i];
			if(i==today_info.get("today")){
				calendarData= new DateData(String.valueOf(dateData.getYear()), String.valueOf(dateData.getMonth()), String.valueOf(i), "today", ateuser_data);
			}else{
				calendarData= new DateData(String.valueOf(dateData.getYear()), String.valueOf(dateData.getMonth()), String.valueOf(i), "normal_date", ateuser_data);
			}
			dateList.add(calendarData);
		}

		//달력 빈곳 빈 데이터로 삽입
		int index = 7-dateList.size()%7;
		
		if(dateList.size()%7!=0){
			
			for (int i = 0; i < index; i++) {
				calendarData= new DateData(null, null, null, null);
				dateList.add(calendarData);
			}
		}

		int count=checkateuserService.countAteUser(dateData);
		String money=decFormat.format(count*7000);
		//배열에 담음
		model.addAttribute("dateList", dateList);		//날짜 데이터 배열
		model.addAttribute("today_info", today_info);
		model.addAttribute("countate", count); //이번 달 전체 식사 횟수
		model.addAttribute("money", money); //이번 달 금액 (전체 식사 횟수 x 단가)
		
		return "admin/owner/printAteUser/ownerCalendar";
	}

	//식당운영자 _ 월/일별 식수 인원 리스트 확인 (캘린더->리스트)
	@RequestMapping(value = "/owner/printAteUser", method = RequestMethod.POST)
	@ResponseBody
	public ModelAndView ateUserShow(@RequestParam("ate_date") String ate_date, Model model,HttpServletRequest re) throws Exception {
		ModelAndView mv = new ModelAndView("jsonView");
		List<QrCodeDTO> dto=checkateuserService.DayAteUserAll(ate_date);	
		QrCodeDTO[] ateuserlist=new QrCodeDTO[100];
		String date="";
		String atedate="";
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");

		for(int i=0;i<dto.size();i++) {
			ateuserlist[i]=dto.get(i);
			date= format.format(dto.get(i).getAte_date());
			String[] atedatesplit=date.split("-");
			atedate=atedatesplit[0].substring(2,4)+"/"+atedatesplit[1]+"/"+atedatesplit[2];
		}
		try {
			mv.addObject("result", ateuserlist);
			mv.addObject("atedate", atedate);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		return mv;
	}
	
	//식당운영자 _ 월별 총 계산 페이지로 이동
	@RequestMapping(value = "/owner/totalCount", method = RequestMethod.GET)
	public String totalCount(HttpServletRequest re, Model model) throws Exception {	

		return "admin/owner/printAteUser/totalCount";
	}
	
	//식당운영자 _ 월별 총 계산 (기간별로 계산)
	@RequestMapping(value = "/owner/totalCountSearch", method = RequestMethod.POST)
	@ResponseBody
	public ModelAndView totalCountSearch(HttpServletRequest re, Model model) throws Exception {	
		
		DecimalFormat decFormat = new DecimalFormat("###,###");
		SimpleDateFormat format = new SimpleDateFormat("yyyy-MM-dd");
		ModelAndView mv = new ModelAndView("jsonView");
		String startDate=re.getParameter("startDt");
		String endDate=re.getParameter("endDt");

		DateData dd=new DateData();
		dd.setStartDate(startDate);
		dd.setEndDate(endDate);
		int ateUser=0;
		
		Date sd = format.parse(startDate);
		Date ed = format.parse(endDate);
		ArrayList<String> dates = new ArrayList<String>();
		SearchResultDTO[] ateuserlist=new SearchResultDTO[100];
		List<SearchResultDTO> dto= new ArrayList<SearchResultDTO>();
		Date currentDate = sd;
		
		while (currentDate.compareTo(ed) <= 0) {
			dates.add(format.format(currentDate));
			Calendar c = Calendar.getInstance();
			c.setTime(currentDate);
			c.add(Calendar.DAY_OF_MONTH, 1);
			currentDate = c.getTime();
		}
		for(int i=0;i<dates.size();i++) {
			SearchResultDTO srdto=new SearchResultDTO();
			int ateResult=0;
			ateResult=checkateuserService.CountAteTermTable(dates.get(i));
			srdto.setEatDate(dates.get(i));
			srdto.setAteUserCount(ateResult);
			String tmoney=decFormat.format(ateResult*7000);
			srdto.setTotalMoney(tmoney);
			dto.add(i,srdto);
		}
		for(int i=0;i<dto.size();i++) {
			ateuserlist[i]=dto.get(i);
		}
		try {
			ateUser=checkateuserService.CountAteTerm(dd);
			String money=decFormat.format(ateUser*7000);
			mv.addObject("ateUser",ateUser);
			mv.addObject("money",money);
			mv.addObject("msg","검색완료!");
			mv.addObject("result",ateuserlist);
		} catch(Exception e){
			System.out.println(e.getMessage());
		}
		
		return mv;
	}

	//식당운영자 _ 일별 식단 등록 페이지 이동(캘린더)
	@RequestMapping(value = "/owner/menuPlanInsertCalendar", method = RequestMethod.GET)
	public String menuPlanInsertCalendar(HttpServletRequest re, Model model, DateData dateData) throws Exception {	
		Calendar cal = Calendar.getInstance();
		DateData calendarData;
		//검색 날짜
		if(dateData.getDate().equals("")&&dateData.getMonth().equals("")){
			dateData = new DateData(String.valueOf(cal.get(Calendar.YEAR)),String.valueOf(cal.get(Calendar.MONTH)),String.valueOf(cal.get(Calendar.DATE)),null);
		}
		//검색 날짜 end

		Map<String, Integer> today_info =  dateData.today_info(dateData);
		List<DateData> dateList = new ArrayList<DateData>();
		// 검색 날짜 end
		
		ArrayList<MenuPlannerDTO> ateuser_list = (ArrayList<MenuPlannerDTO>) menuService.selectDayMenuPlan(dateData);
		// 달력데이터에 넣기 위한 배열 추가
		MenuPlannerDTO[][] selectDayMenulist = new MenuPlannerDTO[32][100];
				if (ateuser_list.isEmpty() != true) {
					int j = 0;
					for (int i = 0; i < ateuser_list.size(); i++) {
					int date = Integer.parseInt(String.valueOf(ateuser_list.get(i).getToday_date()).substring(
						String.valueOf(ateuser_list.get(i).getToday_date()).length() - 2,
						String.valueOf(ateuser_list.get(i).getToday_date()).length()));
						if (i > 0) {
							int date_before = Integer.parseInt(String.valueOf(ateuser_list.get(i - 1).getToday_date())
									.substring(String.valueOf(ateuser_list.get(i - 1).getToday_date()).length() - 2,
												String.valueOf(ateuser_list.get(i - 1).getToday_date()).length()));
							if (date_before == date) {
								j = j + 1;
								selectDayMenulist[date][j] = ateuser_list.get(i);
							} else {
								j = 0;
								selectDayMenulist[date][j] = ateuser_list.get(i);
							}
						} else {
							selectDayMenulist[date][j] = ateuser_list.get(i);
						}
					}
				}
		//실질적인 달력 데이터 리스트에 데이터 삽입 시작.
		//일단 시작 인덱스까지 아무것도 없는 데이터 삽입
		for(int i=1; i<today_info.get("start"); i++){
			calendarData= new DateData(null, null, null, null);
			dateList.add(calendarData);
		}
		
		//날짜 삽입
		for (int i = today_info.get("startDay"); i <= today_info.get("endDay"); i++) {
			MenuPlannerDTO[] ateuser_data=new MenuPlannerDTO[100];
			ateuser_data= selectDayMenulist[i];
			if(i==today_info.get("today")){
				calendarData= new DateData(String.valueOf(dateData.getYear()), String.valueOf(dateData.getMonth()), String.valueOf(i), "today", ateuser_data);
			}else{
				calendarData= new DateData(String.valueOf(dateData.getYear()), String.valueOf(dateData.getMonth()), String.valueOf(i), "normal_date", ateuser_data);
			}
			dateList.add(calendarData);
		}

		//달력 빈곳 빈 데이터로 삽입
		int index = 7-dateList.size()%7;
		
		if(dateList.size()%7!=0){
			
			for (int i = 0; i < index; i++) {
				calendarData= new DateData(null, null, null, null);
				dateList.add(calendarData);
			}
		}
		
		//배열에 담음
		model.addAttribute("dateList", dateList);		//날짜 데이터 배열
		model.addAttribute("today_info", today_info);
		List<?> category=null;
		category=menuService.allMenu();
		model.addAttribute("category", JSONArray.fromObject(category));

		return "admin/owner/menu/menuPlanInsertCalendar";
	}
	/*
	//식당운영자 _ 일별 식단 등록(저장)
	@RequestMapping(value = "/owner/insertTodayMenuPlan", method = RequestMethod.POST ,produces = "application/text; charset=utf8")
	@ResponseBody
	public String insertTodayMenuPlan(Model model,HttpServletRequest re) throws Exception {
		ArrayList<String> sidedish=new ArrayList<String> ();

		String resultMsg = "";
		
		String today_date=re.getParameter("selectDay");
		String rice=re.getParameter("rice");
		String soup=re.getParameter("soup");
		String sideDish=re.getParameter("sideDish");
		//추가 반찬들 arraylist에 저장
		sidedish.add(re.getParameter("sd1"));
		sidedish.add(re.getParameter("sd2"));
		sidedish.add(re.getParameter("sd3"));
		sidedish.add(re.getParameter("sd4"));
		sidedish.add(re.getParameter("sd5"));
		sidedish.add(re.getParameter("sd6"));
		sidedish.add(re.getParameter("sd7"));
		sidedish.add(re.getParameter("sd8"));
		sidedish.add(re.getParameter("sd9"));
		
		for(int i=0;i<sidedish.size();i++) {
			if(!sidedish.get(i).equals("")) {
				sideDish=sideDish+"/"+sidedish.get(i);
			}
		}
		
		MenuPlannerDTO dto=new MenuPlannerDTO();
		
		try {
			dto.setToday_date(today_date);
			dto.setSteamed_rice(rice);
			dto.setSoup(soup);
			dto.setSide_dish(sideDish); 
			
			menuService.insertMenuPlan(dto);
			
			System.out.println("등록완료");
			resultMsg = "등록완료";
		} catch(Exception e){
			System.out.println(e.getMessage());
			
			resultMsg = "등록실패";
			
		}
		
		return resultMsg;
	}
	//식당운영자 _ 일일 식단표 등록_식단 수정 정보 불러오기
	@RequestMapping(value = "/owner/updateTodayMenuPlan", method = RequestMethod.POST)
	public ModelAndView updateTodayMenuPlan(@RequestParam("selectDate") String select_date, Model model, HttpServletRequest re ) throws Exception {
		ModelAndView mv = new ModelAndView("jsonView");
		String[] sidedish = null;
		MenuPlannerDTO dto = menuService.SelectDateMenuPlan(select_date); //선택한 날짜의 식단 출력
		String side=dto.getSide_dish();
		
		for(int i=0;i<side.length();i++) {
			sidedish=side.split("/");
		}
			
		try {
			mv.addObject("result", dto);
			mv.addObject("sidedish", sidedish);
		} catch (Exception e) {
			System.out.println(e.getMessage());
		}
		
		return mv;
	}*/
	//식당운영자 _ 일일 식단표 출력
	@RequestMapping(value = "/owner/printTodayMenuPlan", method = RequestMethod.POST)
	public ModelAndView printTodayMenuPlan(@RequestParam("selectDate") String select_date, Model model, HttpServletRequest re ) throws Exception {
		ModelAndView mv = new ModelAndView("jsonView");
		String[] sidedish = null;
		int check=menuService.checkMenuIn(select_date);
			
		if(check==0) {
			mv.addObject("check",check);
		} else{
			MenuPlannerDTO dto = menuService.SelectDateMenuPlan(select_date); //선택한 날짜의 식단 출력
			String side=dto.getSide_dish();

			for(int i=0;i<side.length();i++) {
				sidedish=side.split("/");
			}
					
			try {
				mv.addObject("result", dto);
				mv.addObject("sidedish", sidedish);
				mv.addObject("check",check);
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		}			
		return mv;
	}
	
	//식당운영자 _ 일일 식단표 수정 페이지
	@RequestMapping(value = "/owner/menuInCheck", method = RequestMethod.POST)
	public ModelAndView menuInCheck(@RequestParam("selectDate") String select_date, Model model) throws Exception {
		ModelAndView mv = new ModelAndView("jsonView");
		//String[] sidedish = null;
		int check=menuService.checkMenuIn(select_date);
		
		List<?> category = null;
		category = menuService.allMenu();
		mv.addObject("category", category);
		
		if(check>0) {
			MenuPlannerDTO dto = menuService.SelectDateMenuPlan(select_date);

			try {
				mv.addObject("todayMenu", dto);
				mv.addObject("check",check);
			} catch (Exception e) {
				System.out.println(e.getMessage());
			}
		} else if(check==0){
			mv.addObject("check",check);	
		}
		return mv;
	}
	/*	
	@RequestMapping(value = "/owner/modifyTodayMenuPlan", method = RequestMethod.POST, produces = "application/text; charset=utf8")
	@ResponseBody
	public String modifyTodayMenuPlan(HttpServletRequest re, Model model) throws Exception {	
		ArrayList<String> sidedish=new ArrayList<String> ();
		String resultMsg = "";
		String selectDay=re.getParameter("selectDay");
		String rice=re.getParameter("rice");
		String soup=re.getParameter("soup");
		String sideDish=re.getParameter("sideDish");
		//추가 반찬들 arraylist에 저장
		sidedish.add(re.getParameter("sd1"));
		sidedish.add(re.getParameter("sd2"));
		sidedish.add(re.getParameter("sd3"));
		sidedish.add(re.getParameter("sd4"));
		sidedish.add(re.getParameter("sd5"));
		sidedish.add(re.getParameter("sd6"));
		sidedish.add(re.getParameter("sd7"));
		sidedish.add(re.getParameter("sd8"));
		sidedish.add(re.getParameter("sd9"));
		
		for(int i=0;i<sidedish.size();i++) {
			if(!sidedish.get(i).equals("")) {
				sideDish=sideDish+"/"+sidedish.get(i);
			}
		}
		MenuPlannerDTO dto=new MenuPlannerDTO();
		try {
			dto.setSteamed_rice(rice);
			dto.setSoup(soup);
			dto.setSide_dish(sideDish);
			dto.setSelect_date(selectDay);
			
			menuService.UpdateSelectDayMenuPlan(dto);
			
			resultMsg = "수정완료";
		} catch(Exception e){
			System.out.println(e.getMessage());
			resultMsg = "수정실패";
		}
		return resultMsg;
	}
	*/
}

